package handlers.user

import dev.inmo.tgbotapi.extensions.utils.textContentOrNull
import dev.inmo.tgbotapi.types.chat.PrivateChat
import dev.inmo.tgbotapi.types.message.abstracts.CommonMessage
import dev.inmo.tgbotapi.types.message.abstracts.ContentMessage
import dev.inmo.tgbotapi.types.message.content.MediaGroupContent
import dev.inmo.tgbotapi.types.message.content.MessageContent
import dev.inmo.tgbotapi.types.message.content.TextContent
import dev.inmo.tgbotapi.types.message.content.VisualMediaGroupPartContent
import dev.inmo.tgbotapi.utils.bold
import dev.inmo.tgbotapi.utils.buildEntities
import dev.inmo.tgbotapi.utils.italic
import domain.AdminManagedType
import domain.model.Chat
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flow
import util.ResourceProvider
import util.getContentWithUserMention
import util.toDomainModel
import javax.inject.Inject

class UserMessageSender @Inject constructor(
    private val telegramMessageSender: TelegramMessageSender,
) {
    suspend fun sendWelcomeMessage(chatId: Long): Result<ContentMessage<TextContent>> {
        val message = """
                –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —á–∏—Å—Ç–æ—Ç—ã El Capitan üëã

                –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª—é–±–æ–º –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–∏ –∏ –Ω–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –æ–± —ç—Ç–æ–º —É–∑–Ω–∞—é—Ç ü§ù

                –ü—Ä–æ—Å–∏–º –Ω–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –ª–∏—à–Ω–µ–≥–æ, –∏–Ω–∞—á–µ –º—ã –≤–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä—É–µ–º ü´¢

                –ñ–µ–ª–∞–µ–º –≤–∞–º —Ö–æ—Ä–æ—à–∏—Ö –∏ —á–∏—Å—Ç—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚ù§Ô∏è
            """.trimIndent()
        return telegramMessageSender.sendMessage(chatId, message)
    }

    suspend fun sendAdminWelcomeMessage(chatId: Long): Result<ContentMessage<TextContent>> {
        return telegramMessageSender.sendMessage(
            chatId = chatId,
            messageText = ResourceProvider.welcomeMessage(AdminManagedType.Admin),
        )
    }

    suspend fun sendReceiverWelcomeMessage(chatId: Long): Result<ContentMessage<TextContent>> {
        return telegramMessageSender.sendMessage(
            chatId = chatId,
            messageText = ResourceProvider.welcomeMessage(AdminManagedType.Receiver),
        )
    }

    suspend fun sendHelpMessage(chatId: Long): Result<ContentMessage<TextContent>> {
        val textSources = buildEntities("\n\n") {
            bold("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")

            +"""
            - —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ, 
            - –æ–ø–∏—à–∏—Ç–µ –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–æ–π—Ç–∏, 
            - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. 
            """.trimIndent()

            italic(
                buildEntities(" ") {
                    +"""
                    –í–∞–∂–Ω–æ: –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ–ø–∏—Å—ã–≤–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, —Ç.–∫. –±–æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π.
                    –ï—Å–ª–∏ –≤—Å—ë –∂–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π
                    """.trimIndent()
                    bold("/call")
                    +"–∏ –æ–ø–∏—à–∏—Ç–µ –≤—Å—ë –≤ –æ–¥–Ω–æ–º —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
                }
            )
        }
        return telegramMessageSender.sendMessage(chatId = chatId, textSources = textSources)
    }

    suspend fun sendMessageOnSuccessfulForward(chatId: Long): Result<ContentMessage<TextContent>> {
        return telegramMessageSender.sendMessage(
            chatId = chatId, messageText = """
                                –í–∞—à –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞—à–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º!
                                –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ–±—Ä–∞—â–∞–µ—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —á–∏—Å—Ç–æ—Ç—É –≤ –∑–∞–ª–µ! :)
                                """.trimIndent()
        )
    }

    suspend fun sendMessageOnUnsuccessfulForward(chatId: Long): Result<ContentMessage<TextContent>> {
        return telegramMessageSender.sendMessage(
            chatId = chatId, messageText = """
                                –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞—à–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º :(
                                –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ–± –æ—à–∏–±–∫–µ –∏ –≤—Å–∫–æ—Ä–µ –º—ã –∏—Å–ø—Ä–∞–≤–∏–º –µ—ë
                                –í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞—à–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –≤ –∑–∞–ª–µ –∏–ª–∏ –Ω–∞ —Ä–µ—Å–µ–ø—à–µ–Ω, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                                
                                –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ–±—Ä–∞—â–∞–µ—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —á–∏—Å—Ç–æ—Ç—É –≤ –∑–∞–ª–µ! :)
                                """.trimIndent()
        )
    }

    suspend fun sendMessage(chatId: Long, messageText: String): Result<ContentMessage<TextContent>> {
        return telegramMessageSender.sendMessage(chatId = chatId, messageText = messageText)
    }

    fun forwardSingleMediaContentMessage(
        message: CommonMessage<MessageContent>,
        chat: Chat,
    ): Flow<Result<Any>> {
        return flow {
            telegramMessageSender.forwardMessage(
                chatId = chat.telegramChatId,
                message = message,
            ).onSuccess {
                emit(Result.success(it))
                return@flow
            }.onFailure {
                emit(Result.failure(it))
            }

            telegramMessageSender.sendMessage(
                chatId = chat.telegramChatId,
                messageText = message.content.textContentOrNull()?.text.orEmpty(),
            ).onSuccess {
                emit(Result.success(it))
                return@flow
            }.onFailure {
                emit(Result.failure(it))
            }
        }
    }

    fun resendMediaGroup(
        message: CommonMessage<MediaGroupContent<VisualMediaGroupPartContent>>,
        chat: Chat,
    ): Flow<Result<ContentMessage<MediaGroupContent<VisualMediaGroupPartContent>>>> {
        val fromUser = (message.chat as PrivateChat).toDomainModel()
        val newContent = message.getContentWithUserMention(fromUser)

        return flow {
            emit(
                telegramMessageSender.sendVisualMediaGroup(
                    chatId = chat.telegramChatId,
                    media = newContent,
                )
            )
        }
    }
}
